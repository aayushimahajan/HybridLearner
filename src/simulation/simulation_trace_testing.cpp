/*
 * simulation_trace_testing.cpp
 *
 *  Created on: 21-Feb-2022
 *      Author: amit
 */
#include "simulation_trace_testing.h"

bool simulation_trace_testing::safetyViolationCheck(user_inputs::ptr &user, std::string traceFileName, struct simu_dataStruct &violation_result) {

	unsigned int dim = user->getSysDimension();

	const char* resultfile = traceFileName.c_str();
	//std::cout << "\nUnsafe Polytope going to create polytope: \n";
	polytope::ptr unsafe_poly;
	double gt_lower=0.0, gt_upper=user->getTimeHorizon();	//default 0 to time-horizon
	string_to_polytope_withTimeBound(user->getGoalString(), unsafe_poly, gt_lower, gt_upper);	//Returns a polytope from string along with lower and upper time bound
	//Taking care of time-constraints (gt>=10 & gt<=time-horizon)
	//cout <<"Time lower = "<< gt_lower << "  time upper=" <<gt_upper <<endl;

	std::ifstream in(resultfile);	//This is the file generated by running the Learning Algorithm

	bool found=false;
	if (in) {
		std::string line1;
		double time_t=0, distance=0.0;
		std::vector<double> variable_value(dim);
		while (std::getline(in, line1)) {
			std::istringstream word(line1);
			word >> time_t;	//reads the first number which is time value

			for (unsigned int i=0; i < dim; i++) {
				word >> variable_value[i]; //Reading rest of the columns consisting of variables value.
			}
			//Step 2) Now test/check if this generated data actually Falsify the safety property.
			/*std::cout << "\nUnsafe Polytope: \n";
			std::cout << unsafe_poly->getCoeffMatrix() << "\n";
			for (unsigned int i=0; i < unsafe_poly->getColumnVector().size(); i++){
				std::cout <<unsafe_poly->getColumnVector()[i] << std::endl;
			}*/

			if (time_t >= gt_lower && time_t <= gt_upper) {
				distance = unsafe_poly->point_distance(variable_value); //returns 0 if point is inside the polytope
//				cout << "distance = "<< distance<<endl;
				/*if (log_set){
					 log_file << "(";
					for (unsigned int i=0; i < dim; i++) {
						log_file << variable_value[i]; //Reading rest of the columns consisting of variables value.
						if (i != (dim - 1)){
							log_file << " , ";
						}
					}
					log_file << ")  ";
					log_file << " distance = "<< distance<<endl;
				}*/
				if (distance == 0) {
					found = true;
					//Also return the Time-Bound when the violation is Found
					violation_result.first_violation_timeBound = time_t;
					violation_result.foundViolation = true;
					break;
				}
			}
		} //end-while

		/*if (found) {
			cout << "Found a Valid Counter-example!!!"<<endl;
		} else {
			cout << "NO Valid Counter-example Found!!!"<<endl;
		}*/
	} //end of file reading

	in.close();	//closing the file

	return found;
}
